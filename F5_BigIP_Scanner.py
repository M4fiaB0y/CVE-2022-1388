import os
import requests
import ipaddress
from requests.packages.urllib3.exceptions import InsecureRequestWarning



def clear_console():
	if os.name == "nt":
		clearCommand = "cls"
	else:
		clearCommand = "clear"

	os.system(clearCommand)



def ip_range_to_list(ipObject):
	ipList = []

	for ip in ipObject:
		ipList.append(ip)

	return ipList



def check_ip_vulnerable(remoteIP):
	isVulnerable = False

	try:
		targetURL = remoteIP + "/mgmt/shared/authn/login"
		serverResponse = requests.get(targetURL, verify=False, timeout=3)

		if "resterrorresponse" in serverResponse.text:
			isVulnerable = True
		else:
			pass
	except Exception as e:
		pass

	return isVulnerable



def get_ip_object(ipRange):
	try:
		ipObject = ipaddress.IPv4Network(ipRange)
	except:
		ipObject = None

	return ipObject



def main():
	"""
	Scan IP ranges for IP's vulnerable to
	the F5 Big IP exploit (CVE-2022-1388)
	"""
	requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

	while True:
		clear_console()

		ipRange = input("Enter IP range to scan: ")
		ipObject = get_ip_object(ipRange)

		if ipObject == None:
			print("[*] Incorrect IP format input.")
			input("[ENTER] to continue...")
			continue
		else:
			break

	if os.name == "nt":
		logFile = os.getcwd() + "\\vulnerable_ips.log"
	else:
		logFile = os.getcwd() + "/vulnerable_ips.log"

	print("Collecting IPs from range input.")
	ipList = ip_range_to_list(ipObject)
	listLength = len(ipList)

	print("Starting scan of " + str(listLength) + " IP's.")
	vulnerableCount = 0

	for ip in ipList:
		isVulnerable = check_ip_vulnerable(ip)

		if isVulnerable == True:
			vulnerableCount += 1
			print("[!] Vulnerable IP found: " + str(ip))

			with open(logFile, "a") as fileOut:
				fileOut.write(ip + "\n")

	print(str(vulnerableCount) + " vulnerable IP's logged to vulnerable_ips.log")



if __name__ == "__main__":
	main()